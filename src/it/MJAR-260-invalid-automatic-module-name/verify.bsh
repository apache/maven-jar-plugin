
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.jar.*;
import org.codehaus.plexus.util.*;

boolean result = true;

try
{
    File target = new File( basedir, "target" );
    if ( !target.exists() || !target.isDirectory() )
    {
        System.err.println( "target file is missing or not a directory." );
        return false;
    }

    File artifact = new File( target, "mjar260-invalid-automatic-module-name-1.0-SNAPSHOT.jar" );
    if ( artifact.exists() || artifact.isDirectory() )
    {
        System.err.println( "artifact file is created or a directory." );
        return false;
    }

    String log = new String(Files.readAllBytes(basedir.toPath().resolve("build.log")), "UTF-8");
    String[] snippets = new String[] {
      "[INFO] BUILD FAILURE",
      "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-jar-plugin",
      "Caused by: org.apache.maven.plugin.MojoExecutionException: Error assembling JAR",
      "Caused by: org.codehaus.plexus.archiver.jar.ManifestException: Invalid automatic module name: 'in-valid.name.with.new.keyword'"
    };

    System.out.println("\nVerifying log snippets...");
    for (String snippet : snippets) {
      if (!log.contains(snippet)) {
        System.err.println("XXX| Snippet `" + snippet + "` not found");
        result = false;
        continue;
      }
      System.out.println("   | `" + snippet + "` found in log");
    }
}
catch( Throwable e )
{
    e.printStackTrace();
    result = false;
}

return result;
